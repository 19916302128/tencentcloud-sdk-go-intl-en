// Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20180711

import (
    "encoding/json"

    tchttp "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/http"
)

type AppStatisticsItem struct {

	// Voice chat statistics
	// Note: This field may return null, indicating that no valid values can be obtained.
	RealtimeSpeechStatisticsItem *RealTimeSpeechStatisticsItem `json:"RealtimeSpeechStatisticsItem,omitempty" name:"RealtimeSpeechStatisticsItem"`

	// Voice messaging statistics
	// Note: This field may return null, indicating that no valid values can be obtained.
	VoiceMessageStatisticsItem *VoiceMessageStatisticsItem `json:"VoiceMessageStatisticsItem,omitempty" name:"VoiceMessageStatisticsItem"`

	// Phrase filtering statistics
	// Note: This field may return null, indicating that no valid values can be obtained.
	VoiceFilterStatisticsItem *VoiceFilterStatisticsItem `json:"VoiceFilterStatisticsItem,omitempty" name:"VoiceFilterStatisticsItem"`

	// Statistical period
	Date *string `json:"Date,omitempty" name:"Date"`
}

type CreateAppRequest struct {
	*tchttp.BaseRequest

	// Application name
	AppName *string `json:"AppName,omitempty" name:"AppName"`

	// Tencent Cloud project ID. Default value: 0, which means that the default project is used
	ProjectId *uint64 `json:"ProjectId,omitempty" name:"ProjectId"`

	// List of engines to be supported. Valid values: android, ios, unity, cocos, unreal, windows. All values are selected by default.
	EngineList []*string `json:"EngineList,omitempty" name:"EngineList" list`

	// List of service regions. Valid values: mainland (Mainland China), sa (South America), eu (Europe), oc (Australia), me (Middle East). All values are selected by default.
	RegionList []*string `json:"RegionList,omitempty" name:"RegionList" list`

	// Configuration information of voice chat
	RealtimeSpeechConf *RealtimeSpeechConf `json:"RealtimeSpeechConf,omitempty" name:"RealtimeSpeechConf"`

	// Configuration information of voice messaging and speech-to-text
	VoiceMessageConf *VoiceMessageConf `json:"VoiceMessageConf,omitempty" name:"VoiceMessageConf"`

	// Configuration information of phrase analysis
	VoiceFilterConf *VoiceFilterConf `json:"VoiceFilterConf,omitempty" name:"VoiceFilterConf"`

	// List of tags to be added
	Tags []*Tag `json:"Tags,omitempty" name:"Tags" list`
}

func (r *CreateAppRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

func (r *CreateAppRequest) FromJsonString(s string) error {
    return json.Unmarshal([]byte(s), &r)
}

type CreateAppResponse struct {
	*tchttp.BaseResponse
	Response *struct {

		// Application ID, which is automatically generated by the backend
		BizId *uint64 `json:"BizId,omitempty" name:"BizId"`

		// Application name, which is passed through from the `AppName` input parameter
		AppName *string `json:"AppName,omitempty" name:"AppName"`

		// Project ID, which is passed through from the entered `ProjectId`
		ProjectId *uint64 `json:"ProjectId,omitempty" name:"ProjectId"`

		// Application key, which is used when the GME SDK is initialized
		SecretKey *string `json:"SecretKey,omitempty" name:"SecretKey"`

		// Service creation timestamp
		CreateTime *uint64 `json:"CreateTime,omitempty" name:"CreateTime"`

		// Configuration information of voice chat
		RealtimeSpeechConf *RealtimeSpeechConf `json:"RealtimeSpeechConf,omitempty" name:"RealtimeSpeechConf"`

		// Configuration information of voice messaging and speech-to-text
		VoiceMessageConf *VoiceMessageConf `json:"VoiceMessageConf,omitempty" name:"VoiceMessageConf"`

		// Configuration information of phrase analysis
		VoiceFilterConf *VoiceFilterConf `json:"VoiceFilterConf,omitempty" name:"VoiceFilterConf"`
	} `json:"Response"`
}

func (r *CreateAppResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

func (r *CreateAppResponse) FromJsonString(s string) error {
    return json.Unmarshal([]byte(s), &r)
}

type DescribeAppStatisticsRequest struct {
	*tchttp.BaseRequest

	// GME application ID
	BizId *uint64 `json:"BizId,omitempty" name:"BizId"`

	// Data start date (GMT+8) in the format of yyyy-mm-dd, such as 2018-07-13
	StartDate *string `json:"StartDate,omitempty" name:"StartDate"`

	// Data end date (GMT+8) in the format of yyyy-mm-dd, such as 2018-07-13
	EndDate *string `json:"EndDate,omitempty" name:"EndDate"`

	// List of services to be queried. Valid values: RealTimeSpeech, VoiceMessage, VoiceFilter
	Services []*string `json:"Services,omitempty" name:"Services" list`
}

func (r *DescribeAppStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

func (r *DescribeAppStatisticsRequest) FromJsonString(s string) error {
    return json.Unmarshal([]byte(s), &r)
}

type DescribeAppStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *struct {

		// Application usage statistics
		AppStatistics []*AppStatisticsItem `json:"AppStatistics,omitempty" name:"AppStatistics" list`
	} `json:"Response"`
}

func (r *DescribeAppStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

func (r *DescribeAppStatisticsResponse) FromJsonString(s string) error {
    return json.Unmarshal([]byte(s), &r)
}

type ModifyAppStatusRequest struct {
	*tchttp.BaseRequest

	// Application ID, which is generated and returned by the backend after application creation
	BizId *uint64 `json:"BizId,omitempty" name:"BizId"`

	// Application status. Valid values: open, close
	Status *string `json:"Status,omitempty" name:"Status"`
}

func (r *ModifyAppStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

func (r *ModifyAppStatusRequest) FromJsonString(s string) error {
    return json.Unmarshal([]byte(s), &r)
}

type ModifyAppStatusResponse struct {
	*tchttp.BaseResponse
	Response *struct {

		// GME application ID
		BizId *uint64 `json:"BizId,omitempty" name:"BizId"`

		// Application status. Valid values: open, close
		Status *string `json:"Status,omitempty" name:"Status"`
	} `json:"Response"`
}

func (r *ModifyAppStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

func (r *ModifyAppStatusResponse) FromJsonString(s string) error {
    return json.Unmarshal([]byte(s), &r)
}

type RealTimeSpeechStatisticsItem struct {

	// DAU in Mainland China
	MainLandDau *uint64 `json:"MainLandDau,omitempty" name:"MainLandDau"`

	// PCU in Mainland China
	MainLandPcu *uint64 `json:"MainLandPcu,omitempty" name:"MainLandPcu"`

	// Total duration of use in Mainland China in minutes
	MainLandDuration *uint64 `json:"MainLandDuration,omitempty" name:"MainLandDuration"`

	// DAU outside Mainland China
	OverseaDau *uint64 `json:"OverseaDau,omitempty" name:"OverseaDau"`

	// PCU outside Mainland China
	OverseaPcu *uint64 `json:"OverseaPcu,omitempty" name:"OverseaPcu"`

	// Total duration of use outside Mainland China in minutes
	OverseaDuration *uint64 `json:"OverseaDuration,omitempty" name:"OverseaDuration"`
}

type RealtimeSpeechConf struct {

	// Voice chat status. Valid values: open, close
	Status *string `json:"Status,omitempty" name:"Status"`

	// Voice Chat sound quality type. Valid values: high (HD), ordinary (SD). Default value: ordinary
	Quality *string `json:"Quality,omitempty" name:"Quality"`
}

type Tag struct {

	// Tag key
	// Note: This field may return null, indicating that no valid values can be obtained.
	TagKey *string `json:"TagKey,omitempty" name:"TagKey"`

	// Tag value
	// Note: This field may return null, indicating that no valid values can be obtained.
	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
}

type VoiceFilterConf struct {

	// Phrase filtering status. Valid values: open, close
	Status *string `json:"Status,omitempty" name:"Status"`
}

type VoiceFilterStatisticsItem struct {

	// Total duration of phrase filtering
	Duration *uint64 `json:"Duration,omitempty" name:"Duration"`
}

type VoiceMessageConf struct {

	// Voice messaging and speech-to-text status. Valid values: open, close
	Status *string `json:"Status,omitempty" name:"Status"`

	// Language supported for voice messaging and speech-to-text. Valid values: all (all languages), cnen (Chinese and English). Default value: cnen
	Language *string `json:"Language,omitempty" name:"Language"`
}

type VoiceMessageStatisticsItem struct {

	// DAU of voice messaging and speech-to-text
	Dau *uint64 `json:"Dau,omitempty" name:"Dau"`
}
